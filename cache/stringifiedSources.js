module.exports = {sourcesAsStringArrays : {"minimalHelloWorld":[{"name":"minimalHelloWorldLauncher","content":"const {App, TemplateFactory} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit: function(containerSelector) {\r\n\t\t\tconst template = TemplateFactory.createHostDef({\r\n\t\t\t\tnodeName: 'span',\r\n\t\t\t\tattributes: [\r\n\t\t\t\t\t{ textContent: 'Hello World!' }\r\n\t\t\t\t]\r\n\t\t\t});\r\n\r\n\t\t\tconst myHelloWorld = new App.componentTypes.ComponentWithView(template);\r\n\r\n\t\t\treturn App.renderDOM(containerSelector, myHelloWorld);\r\n\t\t}\r\n\t}\r\n}"}],"reactiveHelloWorld":[{"name":"reactiveHelloWorldLauncher","content":"const {App, TemplateFactory} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit: function(containerSelector) {\r\n\t\t\tconst outerTemplate = TemplateFactory.createDef({\r\n\t\t\t\thost : TemplateFactory.createHostDef({\r\n\t\t\t\t\tnodeName: 'p',\r\n\t\t\t\t\tstates: [\r\n\t\t\t\t\t\t{ someState: 'Hello World!' }\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tmembers : [\r\n\t\t\t\t\tTemplateFactory.createHostDef({\r\n\t\t\t\t\t\ttype : 'SimpleText',\r\n\t\t\t\t\t\tnodeName: 'span',\r\n\t\t\t\t\t\treactOnParent: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfrom: 'someState',\r\n\t\t\t\t\t\t\t\tto: 'text'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\r\n\t\t\tconst myComponent = new App.componentTypes.CompoundComponent(outerTemplate);\r\n\r\n\t\t\treturn App.renderDOM(containerSelector, myComponent);\r\n\t\t}\r\n\t}\r\n}"}],"stylingBasics":[{"name":"stylingBasicsLauncher","content":"const {App, TemplateFactory, CreateStyle} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit: function(containerSelector) {\r\n\t\t\tconst style = [\r\n\t\t\t    {\r\n\t\t\t        selector : ':host',\r\n\t\t\t        color : '#FF0000'    // red\r\n\t\t\t    }\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Automagic: using a DOM custom-element shall scope the style on the shadowRoot.\r\n\t\t\t * Consequence: we can't use the DOM \"textContent\" attribute here.\r\n\t\t\t * => let's use the SimpleText Component we've discovered in the last chapter.\r\n\t\t\t*/\r\n\t\t\tconst template = TemplateFactory.createHostDef({\r\n\t\t\t    nodeName : 'my-span',\r\n\t\t\t    props : [\r\n\t\t\t        {text : 'Hello World!'}\r\n\t\t\t    ],\r\n\t\t\t    sWrapper : CreateStyle(style)\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst myHelloWorld = new App.componentTypes.SimpleText(template);\r\n\t\t\t\r\n\t\t\treturn App.renderDOM(containerSelector, myHelloWorld);\r\n\t\t}\r\n\t}\r\n}"}],"form101":[{"name":"form101Launcher","content":"const {App, TemplateFactory} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit: function(containerSelector) {\r\n\t\t\tconst myFormTemplate = TemplateFactory.createDef({\r\n\t\t\t    host : TemplateFactory.createHostDef({\r\n\t\t\t        props : [\r\n\t\t\t            {action : 'url/of/my/endpoint'}\r\n\t\t\t        ],\r\n\t\t\t        subscribeOnChild: [\r\n\t\t\t            {\r\n\t\t\t                 on : 'submit',\r\n\t\t\t                 subscribe : function(e) {this.trigger('submit')}\r\n\t\t\t            }\r\n\t\t\t        ]\r\n\t\t\t    }),\r\n\t\t\t    members : [\r\n\t\t\t         TemplateFactory.createHostDef({\r\n\t\t\t             type : 'UsernameInput',\r\n\t\t\t             attributes : [\r\n\t\t\t                 {title : '-Username'}\r\n\t\t\t             ],\r\n\t\t\t             section : 0\r\n\t\t\t         }),\r\n\t\t\t         TemplateFactory.createHostDef({\r\n\t\t\t             type : 'EMailInput',\r\n\t\t\t             attributes : [\r\n\t\t\t                 {title : '-EMail'}\r\n\t\t\t             ],\r\n\t\t\t             section : 0\r\n\t\t\t         }),\r\n\t\t\t         TemplateFactory.createHostDef({\r\n\t\t\t             type : 'SubmitButton',\r\n\t\t\t             props : [\r\n\t\t\t                 {text : 'Register'}\r\n\t\t\t             ],\r\n\t\t\t             section : 1\r\n\t\t\t         })\r\n\t\t\t    ]\r\n\t\t\t});\r\n\t\t\tconst myForm = new App.componentTypes.FormComponent(myFormTemplate);\r\n\t\t\t\r\n\t\t\treturn App.renderDOM(containerSelector, myForm);\r\n\t\t}\r\n\t}\r\n}"}],"list101":[{"name":"list101Launcher","content":"const {App, TemplateFactory} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit : function(containerSelector) {\r\n\t\t\tconst listItems = ['Pepper', 'Salt', 'Paprika'];\r\n\t\t\t\r\n\t\t\t// UL\r\n\t\t\tconst listDef = TemplateFactory.createDef({\r\n\t\t\t\thost : TemplateFactory.createDef({\r\n\t\t\t\t\tnodeName : 'ul',\r\n\t\t\t\t}),\r\n\t\t\t\tmembers : listItems.map(\r\n\t\t\t\t\t// LI as \"member-views\" of the component\r\n\t\t\t\t\t(item) => TemplateFactory.createDef({\r\n\t\t\t\t\t\tnodeName: 'li',\r\n\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t{ textContent: item }\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst ulComponent = new App.componentTypes.ComponentWithView(listDef);\r\n\t\t\t\r\n\t\t\treturn App.renderDOM(containerSelector, ulComponent);\r\n\t\t}\r\n\t}\r\n}"}],"reactiveListComponent":[{"name":"reactiveListComponentLauncher","content":"const {App} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit : function(containerSelector) {\r\n\t\t\tconst listItems = ['Pepper', 'Salt', 'Paprika'];\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Instanciation of the list:\r\n\t\t\t * by default, the IteratingComponent generates a ul-li structure\r\n\t\t\t * As in Formant, explicitely passing null as the template is supported,\r\n\t\t\t * let's rely here on the default behavior of the component.\r\n\t\t\t */\r\n\t\t\tconst ulComponent = new App.coreComponents.IteratingComponent(null)\r\n\r\n\t\t\t/*\r\n\t\t\t * An example of override would be:\r\n\t\t\t * const hostDef = TemplateFactory.createHostDef({\r\n\t\t\t *\t\tnodeName : 'section',\r\n\t\t\t *\t});\r\n\t\t\t *\r\n\t\t\t * \tconst slotDef :TemplateFactory.createDef({\r\n\t\t\t *\t\thost : TemplateFactory.createDef({\r\n\t\t\t *\t\t\ttype : 'SimpleText',\r\n\t\t\t *\t\t\tnodeName : 'article'\r\n\t\t\t *\t\t})\r\n\t\t\t *\t})\r\n\t\t\t * const ulComponent = new App.coreComponents.IteratingComponent(hostDef, slotDef)\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\t// Pass data to the IteratingComponent\r\n\t\t\tulComponent.acquireData(listItems);\r\n\t\t\t\r\n\t\t\treturn App.renderDOM(containerSelector, ulComponent);\r\n\t\t}\r\n\t}\r\n}"}],"customReactiveList":[{"name":"customReactiveListLauncher","content":"const {App, TemplateFactory} = require('formantjs');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit : function(containerSelector) {\r\n\t\t\tconst listItems = ['Pepper', 'Salt', 'Paprika'];\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * For this example, let's roughly say that we need a list of \"p\" elements in a \"div\"\r\n\t\t\t */\r\n\t\t\tconst listHostTemplate = TemplateFactory.createHostDef({\r\n\t\t\t\tnodeName : 'div',\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Define your own implementation for the list-item:\r\n\t\t\t *\r\n\t\t\t * The IteratingComponent expects a stream named \"text\" to be implemented.\r\n\t\t\t * Here, we rely on an abstract component-type given by the framework (ComponentWithView),\r\n\t\t\t * and we excplicitely implement the \"text\" stream,.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tconst listItemTemplate = TemplateFactory.createDef({\r\n\t\t\t\thost : TemplateFactory.createDef({\r\n\t\t\t\t\ttype : 'ComponentWithView',\r\n\t\t\t\t\tnodeName : 'p',\r\n\t\t\t\t\tprops : [\r\n\t\t\t\t\t\t{text : undefined}\r\n\t\t\t\t\t],\r\n\t\t\t\t\treactOnSelf : [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcbOnly : true,\r\n\t\t\t\t\t\t\tfrom : 'text',\r\n\t\t\t\t\t\t\tsubscribe : App.componentTypes.ComponentWithView.prototype.appendTextFromValueOnView\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// Instanciate the list: it is empty for now, it's just a \"div\" node\r\n\t\t\tconst listComponent = new App.coreComponents.IteratingComponent(listHostTemplate, listItemTemplate);\r\n\t\t\t\r\n\t\t\t// And populate it :)\r\n\t\t\tlistComponent.acquireData(listItems);\r\n\t\t\t\r\n\t\t\treturn App.renderDOM(containerSelector, listComponent);\r\n\t\t}\r\n\t}\r\n}"}],"table101":[{"name":"table101Launcher","content":"const {App, TemplateFactory, ReactiveDataset} = require('formantjs');\r\n\r\nconst buildData = require('src/App/helpers/table101DataBuilder');\r\nconst localStylesheet = require('src/App/codeSamples/table101StyleDef');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit : function(containerSelector) {\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Build the schematic definition of the table\r\n\t\t\t */\r\n\t\t\tconst columnNames = ['id', 'label'];\r\n\t\t\t\r\n\t\t\tconst rowDef = TemplateFactory.createDef({\r\n\t\t\t\t\thost : TemplateFactory.createHostDef({\r\n\t\t\t\t\t\tnodeName : 'tr',\r\n\t\t\t\t\t\tsection : 1,\t\t\t\t\t// the \"section 1\" corresponds to the second subSection of the table\r\n\t\t\t\t\t\tprops : [\r\n\t\t\t\t\t\t\t{id : undefined},\r\n\t\t\t\t\t\t\t{label : undefined}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * We could have used Array.map(), here:\r\n\t\t\t\t\t * (as we do later on, here, in the \"tableDef\" template,\r\n\t\t\t\t\t * or in the \"Implementing bahaviors\" chapter)\r\n\t\t\t\t\t * Still, as we're in a documentation, let's illustrate\r\n\t\t\t\t\t * an explicit shape for a definition (both shapes are, of course, equivalent).\r\n\t\t\t\t\t */\r\n\t\t\t\t\tmembers : [\r\n\t\t\t\t\t\tTemplateFactory.createHostDef({\r\n\t\t\t\t\t\t\ttype : 'SimpleText',\r\n\t\t\t\t\t\t\tnodeName : 'td',\r\n\t\t\t\t\t\t\treactOnParent : [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfrom : 'id', \t\t// 'id' is the first column's name\r\n\t\t\t\t\t\t\t\t\tto : 'text'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tTemplateFactory.createHostDef({\r\n\t\t\t\t\t\t\ttype : 'SimpleText',\r\n\t\t\t\t\t\t\tnodeName : 'td',\r\n\t\t\t\t\t\t\treactOnParent : [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfrom : 'label', \t// 'label' is the second column's name\r\n\t\t\t\t\t\t\t\t\tto : 'text'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar tableDef = TemplateFactory.createDef({\r\n\t\t\t\thost : TemplateFactory.createHostDef({\r\n\t\t\t\t\tnodeName : 'smart-table',\r\n\t\t\t\t\t/* \r\n\t\t\t\t\t * Local stylesheet\r\n\t\t\t\t\t */ \r\n\t\t\t\t\tsWrapper : localStylesheet\r\n\t\t\t\t}),\r\n\t\t\t\tsubSections : [\r\n\t\t\t\t\tTemplateFactory.createHostDef({type : 'ComponentWithView', nodeName : 'thead'}),\r\n\t\t\t\t\tTemplateFactory.createHostDef({type : 'ComponentWithView', nodeName : 'tbody'})\r\n\t\t\t\t],\r\n\t\t\t\t/*\r\n\t\t\t\t * As the header-elements are already known,\r\n\t\t\t\t * let's define them explicitely as a \"member-view\"\r\n\t\t\t\t * in the template of the table.\r\n\t\t\t\t */\r\n\t\t\t\tmembers : [\r\n\t\t\t\t\tTemplateFactory.createDef({\r\n\t\t\t\t\t\thost : TemplateFactory.createDef({\r\n\t\t\t\t\t\t\t\tnodeName : 'tr',\r\n\t\t\t\t\t\t\t\tsection : 0\t\t\t\t\t// the \"section 0\" corresponds to the first subSection of the table\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tmembers : columnNames.map(\r\n\t\t\t\t\t\t\t(columnName) => TemplateFactory.createDef({\r\n\t\t\t\t\t\t\t\tnodeName : 'th',\r\n\t\t\t\t\t\t\t\tattributes : [\r\n\t\t\t\t\t\t\t\t\t{textContent : columnName}\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Instanciate the component\r\n\t\t\t */\r\n\t\t\tconst myTable = new App.componentTypes.CompoundComponent(tableDef);\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Inject & Bind data reactively\r\n\t\t\t */\r\n\t\t\tconst rows = new ReactiveDataset(\r\n\t\t\t\tnull,\t\t\t\t\t\t// only special use cases\r\n\t\t\t\tmyTable,\t\t\t\t\t// the parent of the components which shall be instanciated\r\n\t\t\t\trowDef,\t\t\t\t\t\t// the template for the components which shall be instanciated\r\n\t\t\t\tcolumnNames\t\t\t\t\t// the schema of the dataset\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// buildData() returns an array of objects of type RactiveDataset.Item\r\n\t\t\t// and, here, of the following form :\r\n\t\t\t// \t[\r\n\t\t\t//\t\t{id : string, label : string}\r\n\t\t\t//\t]\r\n\t\t\t// (cause we've declared the column names as being the schema of the dataset)\r\n\t\t\t// The buildData helper function makes use of the factory provided by the instance of \r\n\t\t\t// the ReactiveDataset to type its own items.\r\n\t\t\tconst tableContent = buildData(10, rows);\r\n\t\t\trows.pushApply(tableContent);\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Job done !\r\n\t\t\t */\r\n\t\t\treturn App.renderDOM(containerSelector, myTable);\r\n\t\t}\r\n\t}\r\n}"},{"name":"table101DataBuilder","content":"const dummyData = {\r\n\tadjectives : [\"pretty\", \"large\", \"big\", \"small\", \"tall\", \"short\", \"long\", \"handsome\", \"plain\", \"quaint\", \"clean\", \"elegant\", \"easy\", \"angry\", \"crazy\", \"helpful\", \"mushy\", \"odd\", \"unsightly\", \"adorable\", \"important\", \"inexpensive\", \"cheap\", \"expensive\", \"fancy\"],\r\n\tcolours : [\"red\", \"yellow\", \"blue\", \"green\", \"pink\", \"brown\", \"purple\", \"brown\", \"white\", \"black\", \"orange\"],\r\n\tnouns : [\"table\", \"chair\", \"house\", \"bbq\", \"desk\", \"car\", \"pony\", \"cookie\", \"sandwich\", \"burger\", \"pizza\", \"mouse\", \"keyboard\"]\r\n};\r\n\r\nfunction buildData(count, appData) {\r\n\tconst data = [];\r\n\tlet itemStr = '';\r\n\tfor (let i = 0; i < count; i++) {\r\n\t\titemStr = dummyData.adjectives[randomOn(dummyData.adjectives.length)] + ' '\r\n\t\t\t\t+ dummyData.colours[randomOn(dummyData.colours.length)] + ' '\r\n\t\t\t\t+ dummyData.nouns[randomOn(dummyData.nouns.length)];\r\n\t\t\r\n\t\tdata.push(appData.newItem(\r\n\t\t\t\t\t\ti.toString(),\r\n\t\t\t\t\t\titemStr\r\n\t\t\t\t\t));\r\n\t}\r\n\treturn data;\r\n}\r\nfunction randomOn(max) {\r\n\treturn (Math.random() * max) | 0;\r\n}\r\n\r\nmodule.exports = buildData;\r\n"},{"name":"table101StyleDef","content":"/*\r\n * Local Stylesheet for a table\r\n */\r\nconst {CreateStyle} = require('formantjs');\r\n\r\nmodule.exports = CreateStyle([\r\n\t{\r\n\t\tselector: ':host',\r\n\t\tbackground: '#012B39',\r\n\t\tborderRadius: '0.25em',\r\n\t\tborderCollapse: 'collapse',\r\n\t\tmargin: '1em'\r\n\t},\r\n\t{\r\n\t\tselector: 'th',\r\n\t\tborderBottom: '1px solid #364043',\r\n\t\tcolor: '#E2B842',\r\n\t\tfontSize: '0.85em',\r\n\t\tfontWeight: '600',\r\n\t\tpadding: '0.5em 1em',\r\n\t\ttextAlign: 'left'\r\n\t},\r\n\t{\r\n\t\tselector: 'td',\r\n\t\tcolor: '#fff',\r\n\t\tfontWeight: '400',\r\n\t\tpadding: '0.65em 1em'\r\n\t},\r\n\t{\r\n\t\tselector: '.disabled td',\r\n\t\tcolor: '#4F5F64'\r\n\t},\r\n\t{\r\n\t\tselector: 'tbody tr',\r\n\t\ttransition: 'background 0.25s ease'\r\n\t},\r\n\t{\r\n\t\tselector: 'tbody tr:hover',\r\n\t\tbackground: '#014055'\r\n\t},\r\n\t{\r\n\t\tselector : 'tbody tr[selected]',\r\n\t\tbackgroundColor : '#115065'\r\n\t}\r\n]);"}],"tableComponent":[{"name":"tableComponentLauncher","content":"const {App} = require('formantjs');\r\nconst buildData = require('src/App/helpers/tableComponentDataBuilder');\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit : function(containerSelector) {\r\n\t\t\tconst TableComponent = App.componentTypes.ExtensibleTable;\r\n\t\t\t\r\n\t\t\tconst columnNames = ['id', 'label'];\r\n\t\t\tconst myTable = new TableComponent();\r\n\t\t\tmyTable.setColumnsCount(2, columnNames);\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Contrary to the table101 implementation,\r\n\t\t\t * buildData() only needs to return a array of string-arrays.\r\n\t\t\t * Internally, the ExtensibleTable component will convert it to\r\n\t\t\t * an array of objects of type ReactiveDataset.Item.\r\n\t\t\t * \r\n\t\t\t * (in the case of the ExtensibleTable, the ReactiveDataset.Item\r\n\t\t\t * has the following form :\r\n\t\t\t *\t\t{rowContentAsArray : [string, string]}\r\n\t\t\t * (a string for each declared column)\r\n\t\t\t */\r\n\t\t\tconst tableData = buildData(10);\r\n\t\t\tmyTable.acquireData(tableData);\r\n\r\n\t\t\treturn App.renderDOM(containerSelector, myTable);\r\n\t\t}\r\n\t}\r\n}"},{"name":"tableComponentDataBuilder","content":"const dummyData = {\r\n    adjectives : [\"pretty\", \"large\", \"big\", \"small\", \"tall\", \"short\", \"long\", \"handsome\", \"plain\", \"quaint\", \"clean\", \"elegant\", \"easy\", \"angry\", \"crazy\", \"helpful\", \"mushy\", \"odd\", \"unsightly\", \"adorable\", \"important\", \"inexpensive\", \"cheap\", \"expensive\", \"fancy\"],\r\n    colours : [\"red\", \"yellow\", \"blue\", \"green\", \"pink\", \"brown\", \"purple\", \"brown\", \"white\", \"black\", \"orange\"],\r\n    nouns : [\"table\", \"chair\", \"house\", \"bbq\", \"desk\", \"car\", \"pony\", \"cookie\", \"sandwich\", \"burger\", \"pizza\", \"mouse\", \"keyboard\"]\r\n};\r\n\r\nfunction buildData(count) {\r\n    const data = [];\r\n    let itemStr = '';\r\n    for (let i = 0; i < count; i++) {\r\n\t\titemStr = dummyData.adjectives[randomOn(dummyData.adjectives.length)] + ' '\r\n\t\t\t\t+ dummyData.colours[randomOn(dummyData.colours.length)] + ' '\r\n\t\t\t\t+ dummyData.nouns[randomOn(dummyData.nouns.length)];\r\n\t\t\r\n        data.push([i.toString(), itemStr]);\r\n    }\r\n    return data;\r\n}\r\nfunction randomOn(max) {\r\n    return (Math.random() * max) | 0;\r\n}\r\n\t\r\nmodule.exports = buildData;\r\n"}],"behaviorsTableSelect":[{"name":"behaviorsTableSelect","content":"const {App, TemplateFactory, ReactiveDataset} = require('formantjs');\r\n\r\nconst buildData = require('src/App/helpers/table101DataBuilder');\r\nconst localStylesheet = require('src/App/codeSamples/table101StyleDef');\r\n\r\n\r\nmodule.exports = function(parentView) {\r\n\treturn {\r\n\t\tinit : function(containerSelector) {\r\n\t\t\t/*\r\n\t\t\t * Add style to illustrate the behavior\r\n\t\t\t */\r\n\t\t\tlocalStylesheet.setProp('tbody tr', 'cursor', 'pointer');\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Build the schematic definition of the table\r\n\t\t\t */\r\n\t\t\tconst columnNames = ['id', 'label'];\r\n\t\t\t\r\n\t\t\tconst rowDef = TemplateFactory.createDef({\r\n\t\t\t\t\thost : TemplateFactory.createHostDef({\r\n\t\t\t\t\t\ttype : 'ClickableComponent',\r\n\t\t\t\t\t\tnodeName : 'tr',\r\n\t\t\t\t\t\tsection : 1,\r\n\t\t\t\t\t\tstates : [\r\n\t\t\t\t\t\t\t{id : undefined},\r\n\t\t\t\t\t\t\t{selected : undefined}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tprops : [\r\n\t\t\t\t\t\t\t{label : undefined}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\treactOnParent : [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfrom : 'selected',\r\n\t\t\t\t\t\t\t\tto : 'selected',\r\n\t\t\t\t\t\t\t\tmap : function(componentKey) {return componentKey === this._key ? 'selected' : null} \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tsubscribeOnSelf : [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ton : 'clicked_ok',\r\n\t\t\t\t\t\t\t\tsubscribe : function(e) {this.trigger('update', {changeSelected : this._key})}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tmembers : columnNames.map(\r\n\t\t\t\t\t\t\t(columnName) => TemplateFactory.createHostDef({\r\n\t\t\t\t\t\t\t\t\ttype : 'SimpleText',\r\n\t\t\t\t\t\t\t\t\tnodeName : 'td',\r\n\t\t\t\t\t\t\t\t\treactOnParent : [\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tfrom : columnName,\r\n\t\t\t\t\t\t\t\t\t\t\tto : 'text'\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t)\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar tableDef = TemplateFactory.createDef({\r\n\t\t\t\thost : TemplateFactory.createHostDef({\r\n\t\t\t\t\tnodeName : 'smart-table',\r\n\t\t\t\t\tprops : [\r\n\t\t\t\t\t\t{selected : undefined}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tsubscribeOnChild : [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ton : 'update',\r\n\t\t\t\t\t\t\tsubscribe : function(e) {\r\n\t\t\t\t\t\t\t\tthis.streams.selected.value = e.data.changeSelected;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tsWrapper : localStylesheet\r\n\t\t\t\t}),\r\n\t\t\t\tsubSections : [\r\n\t\t\t\t\tTemplateFactory.createHostDef({type : 'ComponentWithView', nodeName : 'thead'}),\r\n\t\t\t\t\tTemplateFactory.createHostDef({type : 'ComponentWithView', nodeName : 'tbody'})\r\n\t\t\t\t],\r\n\t\t\t\tmembers : [\r\n\t\t\t\t\tTemplateFactory.createDef({\r\n\t\t\t\t\t\thost : TemplateFactory.createDef({\r\n\t\t\t\t\t\t\t\tnodeName : 'tr',\r\n\t\t\t\t\t\t\t\tsection : 0\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tmembers : columnNames.map(\r\n\t\t\t\t\t\t\t(columnName) => TemplateFactory.createDef({\r\n\t\t\t\t\t\t\t\tnodeName : 'th',\r\n\t\t\t\t\t\t\t\tattributes : [\r\n\t\t\t\t\t\t\t\t\t{textContent : columnName}\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Instanciate the component\r\n\t\t\t */\r\n\t\t\tconst myTable = new App.componentTypes.CompoundComponent(tableDef);\r\n\t\t\t\r\n\t\t\t/* \r\n\t\t\t * Inject & Bind data reactively\r\n\t\t\t */\r\n\t\t\tconst rows = new ReactiveDataset(\r\n\t\t\t\tnull,\t\t\t\t\t\t// only special use cases\r\n\t\t\t\tmyTable,\t\t\t\t\t// the parent of the components which shall be instanciated\r\n\t\t\t\trowDef,\t\t\t\t\t\t// the template for the components which shall be instanciated\r\n\t\t\t\tcolumnNames\t\t\t\t\t// the schema of the dataset\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tconst tableContent = buildData(10, rows);\r\n\t\t\trows.pushApply(tableContent);\r\n\t\t\t\r\n\t\t\treturn App.renderDOM(containerSelector, myTable);\r\n\t\t}\r\n\t}\r\n}"}]}};